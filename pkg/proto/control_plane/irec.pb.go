// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.15.3
// source: proto/control_plane/v1/irec.proto

package control_plane

import (
	context "context"
	crypto "github.com/scionproto/scion/pkg/proto/crypto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BeaconAndEgressIntf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selected    int64    `protobuf:"varint,1,opt,name=selected,proto3" json:"selected,omitempty"`
	EgressIntfs []uint32 `protobuf:"varint,2,rep,packed,name=egressIntfs,proto3" json:"egressIntfs,omitempty"`
}

func (x *BeaconAndEgressIntf) Reset() {
	*x = BeaconAndEgressIntf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconAndEgressIntf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconAndEgressIntf) ProtoMessage() {}

func (x *BeaconAndEgressIntf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconAndEgressIntf.ProtoReflect.Descriptor instead.
func (*BeaconAndEgressIntf) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{0}
}

func (x *BeaconAndEgressIntf) GetSelected() int64 {
	if x != nil {
		return x.Selected
	}
	return 0
}

func (x *BeaconAndEgressIntf) GetEgressIntfs() []uint32 {
	if x != nil {
		return x.EgressIntfs
	}
	return nil
}

type JobCompleteNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowIDs    []int64                `protobuf:"varint,1,rep,packed,name=rowIDs,proto3" json:"rowIDs,omitempty"`
	Selection []*BeaconAndEgressIntf `protobuf:"bytes,2,rep,name=selection,proto3" json:"selection,omitempty"`
}

func (x *JobCompleteNotify) Reset() {
	*x = JobCompleteNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCompleteNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCompleteNotify) ProtoMessage() {}

func (x *JobCompleteNotify) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCompleteNotify.ProtoReflect.Descriptor instead.
func (*JobCompleteNotify) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{1}
}

func (x *JobCompleteNotify) GetRowIDs() []int64 {
	if x != nil {
		return x.RowIDs
	}
	return nil
}

func (x *JobCompleteNotify) GetSelection() []*BeaconAndEgressIntf {
	if x != nil {
		return x.Selection
	}
	return nil
}

type JobCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobCompleteResponse) Reset() {
	*x = JobCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCompleteResponse) ProtoMessage() {}

func (x *JobCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCompleteResponse.ProtoReflect.Descriptor instead.
func (*JobCompleteResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{2}
}

type AlgorithmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlgorithmHash []byte `protobuf:"bytes,1,opt,name=algorithmHash,proto3" json:"algorithmHash,omitempty"`
}

func (x *AlgorithmRequest) Reset() {
	*x = AlgorithmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgorithmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmRequest) ProtoMessage() {}

func (x *AlgorithmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmRequest.ProtoReflect.Descriptor instead.
func (*AlgorithmRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{3}
}

func (x *AlgorithmRequest) GetAlgorithmHash() []byte {
	if x != nil {
		return x.AlgorithmHash
	}
	return nil
}

type AlgorithmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *AlgorithmResponse) Reset() {
	*x = AlgorithmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgorithmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmResponse) ProtoMessage() {}

func (x *AlgorithmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmResponse.ProtoReflect.Descriptor instead.
func (*AlgorithmResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{4}
}

func (x *AlgorithmResponse) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type RACJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beacons       []*IRECBeacon      `protobuf:"bytes,1,rep,name=beacons,proto3" json:"beacons,omitempty"`
	AlgorithmHash []byte             `protobuf:"bytes,2,opt,name=algorithmHash,proto3" json:"algorithmHash,omitempty"`
	PropIntfs     []uint32           `protobuf:"varint,4,rep,packed,name=propIntfs,proto3" json:"propIntfs,omitempty"`
	BeaconCount   uint32             `protobuf:"varint,5,opt,name=beaconCount,proto3" json:"beaconCount,omitempty"`
	Flatbuffer    []byte             `protobuf:"bytes,6,opt,name=flatbuffer,proto3" json:"flatbuffer,omitempty"`
	RowIds        []int64            `protobuf:"varint,7,rep,packed,name=rowIds,proto3" json:"rowIds,omitempty"`
	BeaconsUnopt  []*IRECBeaconUnopt `protobuf:"bytes,8,rep,name=beacons_unopt,json=beaconsUnopt,proto3" json:"beacons_unopt,omitempty"`
}

func (x *RACJob) Reset() {
	*x = RACJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RACJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RACJob) ProtoMessage() {}

func (x *RACJob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RACJob.ProtoReflect.Descriptor instead.
func (*RACJob) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{5}
}

func (x *RACJob) GetBeacons() []*IRECBeacon {
	if x != nil {
		return x.Beacons
	}
	return nil
}

func (x *RACJob) GetAlgorithmHash() []byte {
	if x != nil {
		return x.AlgorithmHash
	}
	return nil
}

func (x *RACJob) GetPropIntfs() []uint32 {
	if x != nil {
		return x.PropIntfs
	}
	return nil
}

func (x *RACJob) GetBeaconCount() uint32 {
	if x != nil {
		return x.BeaconCount
	}
	return 0
}

func (x *RACJob) GetFlatbuffer() []byte {
	if x != nil {
		return x.Flatbuffer
	}
	return nil
}

func (x *RACJob) GetRowIds() []int64 {
	if x != nil {
		return x.RowIds
	}
	return nil
}

func (x *RACJob) GetBeaconsUnopt() []*IRECBeaconUnopt {
	if x != nil {
		return x.BeaconsUnopt
	}
	return nil
}

type IncomingBeacon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment *PathSegment `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
}

func (x *IncomingBeacon) Reset() {
	*x = IncomingBeacon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomingBeacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingBeacon) ProtoMessage() {}

func (x *IncomingBeacon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingBeacon.ProtoReflect.Descriptor instead.
func (*IncomingBeacon) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{6}
}

func (x *IncomingBeacon) GetSegment() *PathSegment {
	if x != nil {
		return x.Segment
	}
	return nil
}

type IncomingBeaconResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IncomingBeaconResponse) Reset() {
	*x = IncomingBeaconResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomingBeaconResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingBeaconResponse) ProtoMessage() {}

func (x *IncomingBeaconResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingBeaconResponse.ProtoReflect.Descriptor instead.
func (*IncomingBeaconResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{7}
}

type RACBeaconSources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources []*RACBeaconSource `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *RACBeaconSources) Reset() {
	*x = RACBeaconSources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RACBeaconSources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RACBeaconSources) ProtoMessage() {}

func (x *RACBeaconSources) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RACBeaconSources.ProtoReflect.Descriptor instead.
func (*RACBeaconSources) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{8}
}

func (x *RACBeaconSources) GetSources() []*RACBeaconSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

type RACBeaconSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgnoreIntfGroup bool `protobuf:"varint,1,opt,name=ignoreIntfGroup,proto3" json:"ignoreIntfGroup,omitempty"`
}

func (x *RACBeaconSourcesRequest) Reset() {
	*x = RACBeaconSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RACBeaconSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RACBeaconSourcesRequest) ProtoMessage() {}

func (x *RACBeaconSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RACBeaconSourcesRequest.ProtoReflect.Descriptor instead.
func (*RACBeaconSourcesRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{9}
}

func (x *RACBeaconSourcesRequest) GetIgnoreIntfGroup() bool {
	if x != nil {
		return x.IgnoreIntfGroup
	}
	return false
}

type RACBeaconSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlgorithmHash   []byte `protobuf:"bytes,1,opt,name=algorithmHash,proto3" json:"algorithmHash,omitempty"`
	AlgorithmID     uint32 `protobuf:"varint,2,opt,name=algorithmID,proto3" json:"algorithmID,omitempty"`
	OriginAS        uint64 `protobuf:"varint,3,opt,name=originAS,proto3" json:"originAS,omitempty"`
	OriginIntfGroup uint32 `protobuf:"varint,4,opt,name=originIntfGroup,proto3" json:"originIntfGroup,omitempty"`
}

func (x *RACBeaconSource) Reset() {
	*x = RACBeaconSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RACBeaconSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RACBeaconSource) ProtoMessage() {}

func (x *RACBeaconSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RACBeaconSource.ProtoReflect.Descriptor instead.
func (*RACBeaconSource) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{10}
}

func (x *RACBeaconSource) GetAlgorithmHash() []byte {
	if x != nil {
		return x.AlgorithmHash
	}
	return nil
}

func (x *RACBeaconSource) GetAlgorithmID() uint32 {
	if x != nil {
		return x.AlgorithmID
	}
	return 0
}

func (x *RACBeaconSource) GetOriginAS() uint64 {
	if x != nil {
		return x.OriginAS
	}
	return 0
}

func (x *RACBeaconSource) GetOriginIntfGroup() uint32 {
	if x != nil {
		return x.OriginIntfGroup
	}
	return 0
}

type RACBeaconRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maximum         uint32 `protobuf:"varint,1,opt,name=maximum,proto3" json:"maximum,omitempty"`
	AlgorithmHash   []byte `protobuf:"bytes,2,opt,name=algorithmHash,proto3" json:"algorithmHash,omitempty"`
	AlgorithmID     uint32 `protobuf:"varint,3,opt,name=algorithmID,proto3" json:"algorithmID,omitempty"`
	OriginAS        uint64 `protobuf:"varint,4,opt,name=originAS,proto3" json:"originAS,omitempty"`
	OriginIntfGroup uint32 `protobuf:"varint,5,opt,name=originIntfGroup,proto3" json:"originIntfGroup,omitempty"`
	IgnoreIntfGroup bool   `protobuf:"varint,6,opt,name=ignoreIntfGroup,proto3" json:"ignoreIntfGroup,omitempty"`
}

func (x *RACBeaconRequest) Reset() {
	*x = RACBeaconRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RACBeaconRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RACBeaconRequest) ProtoMessage() {}

func (x *RACBeaconRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RACBeaconRequest.ProtoReflect.Descriptor instead.
func (*RACBeaconRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{11}
}

func (x *RACBeaconRequest) GetMaximum() uint32 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *RACBeaconRequest) GetAlgorithmHash() []byte {
	if x != nil {
		return x.AlgorithmHash
	}
	return nil
}

func (x *RACBeaconRequest) GetAlgorithmID() uint32 {
	if x != nil {
		return x.AlgorithmID
	}
	return 0
}

func (x *RACBeaconRequest) GetOriginAS() uint64 {
	if x != nil {
		return x.OriginAS
	}
	return 0
}

func (x *RACBeaconRequest) GetOriginIntfGroup() uint32 {
	if x != nil {
		return x.OriginIntfGroup
	}
	return 0
}

func (x *RACBeaconRequest) GetIgnoreIntfGroup() bool {
	if x != nil {
		return x.IgnoreIntfGroup
	}
	return false
}

type EgressBeacon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathSeg         *PathSegment `protobuf:"bytes,1,opt,name=pathSeg,proto3" json:"pathSeg,omitempty"`
	InIfId          uint32       `protobuf:"varint,2,opt,name=inIfId,proto3" json:"inIfId,omitempty"`
	EgressIntfs     []uint32     `protobuf:"varint,3,rep,packed,name=egressIntfs,proto3" json:"egressIntfs,omitempty"`
	PullbasedTarget uint64       `protobuf:"varint,4,opt,name=pullbasedTarget,proto3" json:"pullbasedTarget,omitempty"`
}

func (x *EgressBeacon) Reset() {
	*x = EgressBeacon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgressBeacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgressBeacon) ProtoMessage() {}

func (x *EgressBeacon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgressBeacon.ProtoReflect.Descriptor instead.
func (*EgressBeacon) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{12}
}

func (x *EgressBeacon) GetPathSeg() *PathSegment {
	if x != nil {
		return x.PathSeg
	}
	return nil
}

func (x *EgressBeacon) GetInIfId() uint32 {
	if x != nil {
		return x.InIfId
	}
	return 0
}

func (x *EgressBeacon) GetEgressIntfs() []uint32 {
	if x != nil {
		return x.EgressIntfs
	}
	return nil
}

func (x *EgressBeacon) GetPullbasedTarget() uint64 {
	if x != nil {
		return x.PullbasedTarget
	}
	return 0
}

type BeaconQueryAlgorithmOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlgHash []byte   `protobuf:"bytes,1,opt,name=algHash,proto3" json:"algHash,omitempty"`
	AlgID   []uint32 `protobuf:"varint,2,rep,packed,name=algID,proto3" json:"algID,omitempty"`
}

func (x *BeaconQueryAlgorithmOption) Reset() {
	*x = BeaconQueryAlgorithmOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconQueryAlgorithmOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconQueryAlgorithmOption) ProtoMessage() {}

func (x *BeaconQueryAlgorithmOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconQueryAlgorithmOption.ProtoReflect.Descriptor instead.
func (*BeaconQueryAlgorithmOption) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{13}
}

func (x *BeaconQueryAlgorithmOption) GetAlgHash() []byte {
	if x != nil {
		return x.AlgHash
	}
	return nil
}

func (x *BeaconQueryAlgorithmOption) GetAlgID() []uint32 {
	if x != nil {
		return x.AlgID
	}
	return nil
}

type BeaconQueryOriginOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginAS        uint64   `protobuf:"varint,1,opt,name=originAS,proto3" json:"originAS,omitempty"`
	OriginIntfGroup []uint32 `protobuf:"varint,2,rep,packed,name=originIntfGroup,proto3" json:"originIntfGroup,omitempty"`
}

func (x *BeaconQueryOriginOption) Reset() {
	*x = BeaconQueryOriginOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconQueryOriginOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconQueryOriginOption) ProtoMessage() {}

func (x *BeaconQueryOriginOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconQueryOriginOption.ProtoReflect.Descriptor instead.
func (*BeaconQueryOriginOption) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{14}
}

func (x *BeaconQueryOriginOption) GetOriginAS() uint64 {
	if x != nil {
		return x.OriginAS
	}
	return 0
}

func (x *BeaconQueryOriginOption) GetOriginIntfGroup() []uint32 {
	if x != nil {
		return x.OriginIntfGroup
	}
	return nil
}

type BeaconQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maximum      uint32                        `protobuf:"varint,1,opt,name=maximum,proto3" json:"maximum,omitempty"`
	Algorithms   []*BeaconQueryAlgorithmOption `protobuf:"bytes,2,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	Origins      []*BeaconQueryOriginOption    `protobuf:"bytes,3,rep,name=origins,proto3" json:"origins,omitempty"`
	OnlyUnmarked bool                          `protobuf:"varint,4,opt,name=onlyUnmarked,proto3" json:"onlyUnmarked,omitempty"`
	Labels       []uint32                      `protobuf:"varint,5,rep,packed,name=labels,proto3" json:"labels,omitempty"`
}

func (x *BeaconQuery) Reset() {
	*x = BeaconQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconQuery) ProtoMessage() {}

func (x *BeaconQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconQuery.ProtoReflect.Descriptor instead.
func (*BeaconQuery) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{15}
}

func (x *BeaconQuery) GetMaximum() uint32 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *BeaconQuery) GetAlgorithms() []*BeaconQueryAlgorithmOption {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

func (x *BeaconQuery) GetOrigins() []*BeaconQueryOriginOption {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *BeaconQuery) GetOnlyUnmarked() bool {
	if x != nil {
		return x.OnlyUnmarked
	}
	return false
}

func (x *BeaconQuery) GetLabels() []uint32 {
	if x != nil {
		return x.Labels
	}
	return nil
}

type RACBeaconResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beacons []*IRECBeacon `protobuf:"bytes,1,rep,name=beacons,proto3" json:"beacons,omitempty"`
}

func (x *RACBeaconResponse) Reset() {
	*x = RACBeaconResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RACBeaconResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RACBeaconResponse) ProtoMessage() {}

func (x *RACBeaconResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RACBeaconResponse.ProtoReflect.Descriptor instead.
func (*RACBeaconResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{16}
}

func (x *RACBeaconResponse) GetBeacons() []*IRECBeacon {
	if x != nil {
		return x.Beacons
	}
	return nil
}

type StoredBeacon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathSeg *PathSegment `protobuf:"bytes,1,opt,name=pathSeg,proto3" json:"pathSeg,omitempty"`
	InIfId  uint32       `protobuf:"varint,2,opt,name=inIfId,proto3" json:"inIfId,omitempty"`
}

func (x *StoredBeacon) Reset() {
	*x = StoredBeacon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoredBeacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredBeacon) ProtoMessage() {}

func (x *StoredBeacon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredBeacon.ProtoReflect.Descriptor instead.
func (*StoredBeacon) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{17}
}

func (x *StoredBeacon) GetPathSeg() *PathSegment {
	if x != nil {
		return x.PathSeg
	}
	return nil
}

func (x *StoredBeacon) GetInIfId() uint32 {
	if x != nil {
		return x.InIfId
	}
	return 0
}

type PullPathsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationIsdAs uint64 `protobuf:"varint,2,opt,name=destination_isd_as,json=destinationIsdAs,proto3" json:"destination_isd_as,omitempty"`
	AlgorithmHash    []byte `protobuf:"bytes,3,opt,name=algorithmHash,proto3" json:"algorithmHash,omitempty"`
	AlgorithmId      uint32 `protobuf:"varint,4,opt,name=algorithmId,proto3" json:"algorithmId,omitempty"`
}

func (x *PullPathsRequest) Reset() {
	*x = PullPathsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPathsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPathsRequest) ProtoMessage() {}

func (x *PullPathsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPathsRequest.ProtoReflect.Descriptor instead.
func (*PullPathsRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{18}
}

func (x *PullPathsRequest) GetDestinationIsdAs() uint64 {
	if x != nil {
		return x.DestinationIsdAs
	}
	return 0
}

func (x *PullPathsRequest) GetAlgorithmHash() []byte {
	if x != nil {
		return x.AlgorithmHash
	}
	return nil
}

func (x *PullPathsRequest) GetAlgorithmId() uint32 {
	if x != nil {
		return x.AlgorithmId
	}
	return 0
}

type StoredBeaconAndIntf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beacon *StoredBeacon `protobuf:"bytes,1,opt,name=beacon,proto3" json:"beacon,omitempty"`
	Egress []uint32      `protobuf:"varint,2,rep,packed,name=egress,proto3" json:"egress,omitempty"`
}

func (x *StoredBeaconAndIntf) Reset() {
	*x = StoredBeaconAndIntf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoredBeaconAndIntf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredBeaconAndIntf) ProtoMessage() {}

func (x *StoredBeaconAndIntf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredBeaconAndIntf.ProtoReflect.Descriptor instead.
func (*StoredBeaconAndIntf) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{19}
}

func (x *StoredBeaconAndIntf) GetBeacon() *StoredBeacon {
	if x != nil {
		return x.Beacon
	}
	return nil
}

func (x *StoredBeaconAndIntf) GetEgress() []uint32 {
	if x != nil {
		return x.Egress
	}
	return nil
}

type PropagationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beacon []*EgressBeacon `protobuf:"bytes,1,rep,name=beacon,proto3" json:"beacon,omitempty"`
}

func (x *PropagationRequest) Reset() {
	*x = PropagationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagationRequest) ProtoMessage() {}

func (x *PropagationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagationRequest.ProtoReflect.Descriptor instead.
func (*PropagationRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{20}
}

func (x *PropagationRequest) GetBeacon() []*EgressBeacon {
	if x != nil {
		return x.Beacon
	}
	return nil
}

type PropagationRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PropagationRequestResponse) Reset() {
	*x = PropagationRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagationRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagationRequestResponse) ProtoMessage() {}

func (x *PropagationRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagationRequestResponse.ProtoReflect.Descriptor instead.
func (*PropagationRequestResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{21}
}

type IRECBeaconUnopt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathSeg *PathSegment `protobuf:"bytes,1,opt,name=pathSeg,proto3" json:"pathSeg,omitempty"`
	InIfId  uint32       `protobuf:"varint,2,opt,name=inIfId,proto3" json:"inIfId,omitempty"`
	Id      int64        `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IRECBeaconUnopt) Reset() {
	*x = IRECBeaconUnopt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRECBeaconUnopt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRECBeaconUnopt) ProtoMessage() {}

func (x *IRECBeaconUnopt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRECBeaconUnopt.ProtoReflect.Descriptor instead.
func (*IRECBeaconUnopt) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{22}
}

func (x *IRECBeaconUnopt) GetPathSeg() *PathSegment {
	if x != nil {
		return x.PathSeg
	}
	return nil
}

func (x *IRECBeaconUnopt) GetInIfId() uint32 {
	if x != nil {
		return x.InIfId
	}
	return 0
}

func (x *IRECBeaconUnopt) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IRECBeacon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathSeg *IRECPathSegment `protobuf:"bytes,1,opt,name=pathSeg,proto3" json:"pathSeg,omitempty"`
	InIfId  uint32           `protobuf:"varint,2,opt,name=inIfId,proto3" json:"inIfId,omitempty"`
	Id      int64            `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IRECBeacon) Reset() {
	*x = IRECBeacon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRECBeacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRECBeacon) ProtoMessage() {}

func (x *IRECBeacon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRECBeacon.ProtoReflect.Descriptor instead.
func (*IRECBeacon) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{23}
}

func (x *IRECBeacon) GetPathSeg() *IRECPathSegment {
	if x != nil {
		return x.PathSeg
	}
	return nil
}

func (x *IRECBeacon) GetInIfId() uint32 {
	if x != nil {
		return x.InIfId
	}
	return 0
}

func (x *IRECBeacon) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IRECPathSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentInfo []byte         `protobuf:"bytes,1,opt,name=segment_info,json=segmentInfo,proto3" json:"segment_info,omitempty"`
	AsEntries   []*IRECASEntry `protobuf:"bytes,2,rep,name=as_entries,json=asEntries,proto3" json:"as_entries,omitempty"`
}

func (x *IRECPathSegment) Reset() {
	*x = IRECPathSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRECPathSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRECPathSegment) ProtoMessage() {}

func (x *IRECPathSegment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRECPathSegment.ProtoReflect.Descriptor instead.
func (*IRECPathSegment) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{24}
}

func (x *IRECPathSegment) GetSegmentInfo() []byte {
	if x != nil {
		return x.SegmentInfo
	}
	return nil
}

func (x *IRECPathSegment) GetAsEntries() []*IRECASEntry {
	if x != nil {
		return x.AsEntries
	}
	return nil
}

type IRECASEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signed     *crypto.SignedMessage          `protobuf:"bytes,1,opt,name=signed,proto3" json:"signed,omitempty"`
	SignedBody *ASEntrySignedBody             `protobuf:"bytes,3,opt,name=signedBody,proto3" json:"signedBody,omitempty"`
	Unsigned   *PathSegmentUnsignedExtensions `protobuf:"bytes,2,opt,name=unsigned,proto3" json:"unsigned,omitempty"`
}

func (x *IRECASEntry) Reset() {
	*x = IRECASEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRECASEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRECASEntry) ProtoMessage() {}

func (x *IRECASEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRECASEntry.ProtoReflect.Descriptor instead.
func (*IRECASEntry) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{25}
}

func (x *IRECASEntry) GetSigned() *crypto.SignedMessage {
	if x != nil {
		return x.Signed
	}
	return nil
}

func (x *IRECASEntry) GetSignedBody() *ASEntrySignedBody {
	if x != nil {
		return x.SignedBody
	}
	return nil
}

func (x *IRECASEntry) GetUnsigned() *PathSegmentUnsignedExtensions {
	if x != nil {
		return x.Unsigned
	}
	return nil
}

type IRECPathSegmentExcerpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentInfo []byte                `protobuf:"bytes,1,opt,name=segment_info,json=segmentInfo,proto3" json:"segment_info,omitempty"`
	AsEntries   []*IRECASEntryExcerpt `protobuf:"bytes,2,rep,name=as_entries,json=asEntries,proto3" json:"as_entries,omitempty"`
}

func (x *IRECPathSegmentExcerpt) Reset() {
	*x = IRECPathSegmentExcerpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRECPathSegmentExcerpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRECPathSegmentExcerpt) ProtoMessage() {}

func (x *IRECPathSegmentExcerpt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRECPathSegmentExcerpt.ProtoReflect.Descriptor instead.
func (*IRECPathSegmentExcerpt) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{26}
}

func (x *IRECPathSegmentExcerpt) GetSegmentInfo() []byte {
	if x != nil {
		return x.SegmentInfo
	}
	return nil
}

func (x *IRECPathSegmentExcerpt) GetAsEntries() []*IRECASEntryExcerpt {
	if x != nil {
		return x.AsEntries
	}
	return nil
}

type IRECASEntryExcerpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedBody *ASEntrySignedBody             `protobuf:"bytes,3,opt,name=signedBody,proto3" json:"signedBody,omitempty"`
	Unsigned   *PathSegmentUnsignedExtensions `protobuf:"bytes,2,opt,name=unsigned,proto3" json:"unsigned,omitempty"`
}

func (x *IRECASEntryExcerpt) Reset() {
	*x = IRECASEntryExcerpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_irec_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRECASEntryExcerpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRECASEntryExcerpt) ProtoMessage() {}

func (x *IRECASEntryExcerpt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_irec_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRECASEntryExcerpt.ProtoReflect.Descriptor instead.
func (*IRECASEntryExcerpt) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_irec_proto_rawDescGZIP(), []int{27}
}

func (x *IRECASEntryExcerpt) GetSignedBody() *ASEntrySignedBody {
	if x != nil {
		return x.SignedBody
	}
	return nil
}

func (x *IRECASEntryExcerpt) GetUnsigned() *PathSegmentUnsignedExtensions {
	if x != nil {
		return x.Unsigned
	}
	return nil
}

var File_proto_control_plane_v1_irec_proto protoreflect.FileDescriptor

var file_proto_control_plane_v1_irec_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x72, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x13, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x66, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x22, 0x76, 0x0a,
	0x11, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x77, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x49, 0x44, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x41, 0x6e, 0x64,
	0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x66, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x15, 0x0a, 0x13, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x10,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x22, 0x27, 0x0a, 0x11, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xb3, 0x02, 0x0a, 0x06, 0x52, 0x41, 0x43, 0x4a, 0x6f, 0x62, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x45, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52,
	0x07, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x73, 0x5f, 0x75, 0x6e, 0x6f, 0x70, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x45, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x5f, 0x75, 0x6e, 0x6f, 0x70, 0x74, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73,
	0x55, 0x6e, 0x6f, 0x70, 0x74, 0x22, 0x4f, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x55, 0x0a, 0x10, 0x52, 0x41, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x41, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x17, 0x52, 0x41, 0x43, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x66,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x9f, 0x01, 0x0a,
	0x0f, 0x52, 0x41, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x41, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x41, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6e,
	0x74, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xe4,
	0x01, 0x0a, 0x10, 0x52, 0x41, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41,
	0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41,
	0x53, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x66, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x74, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x66,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xb1, 0x01, 0x0a, 0x0c, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x53, 0x65,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x68, 0x53, 0x65, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x49, 0x66, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x49, 0x66, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x75, 0x6c, 0x6c, 0x62, 0x61, 0x73, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x6c, 0x6c, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x4c, 0x0a, 0x1a, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x67, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x6c, 0x67, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x6c, 0x67, 0x49, 0x44, 0x22, 0x5f, 0x0a, 0x17, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x53, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x53, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x66, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49,
	0x6e, 0x74, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x82, 0x02, 0x0a, 0x0b, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x12, 0x52, 0x0a, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x6e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x51, 0x0a,
	0x11, 0x52, 0x41, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x45,
	0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73,
	0x22, 0x65, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6e, 0x49, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x6e, 0x49, 0x66, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x6c, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x64, 0x5f,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x64, 0x41, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x49, 0x64, 0x22, 0x6b, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x66, 0x12, 0x3c, 0x0a, 0x06, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52,
	0x06, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x52, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x79, 0x0a, 0x10, 0x49, 0x52, 0x45, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x75, 0x6e, 0x6f, 0x70, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x68, 0x53, 0x65, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x49, 0x66, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x49, 0x66, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x0a,
	0x49, 0x52, 0x45, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x68, 0x53, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x45, 0x43, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6e, 0x49, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69,
	0x6e, 0x49, 0x66, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x0f, 0x49, 0x52, 0x45, 0x43, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0a, 0x61,
	0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x45, 0x43, 0x41, 0x53, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xe3, 0x01, 0x0a, 0x0b, 0x49, 0x52, 0x45, 0x43, 0x41, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x36, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x51, 0x0a, 0x08, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x75, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x49, 0x52, 0x45, 0x43, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x72, 0x70,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x52, 0x45, 0x43, 0x41, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x78,
	0x63, 0x65, 0x72, 0x70, 0x74, 0x52, 0x09, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x22, 0xb3, 0x01, 0x0a, 0x13, 0x49, 0x52, 0x45, 0x43, 0x41, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x65, 0x78, 0x63, 0x65, 0x72, 0x70, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x51, 0x0a, 0x08, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x75, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x32, 0x7c, 0x0a, 0x13, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xe2, 0x04, 0x0a, 0x13, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x74, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x06,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x1a, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x41, 0x43, 0x4a, 0x6f, 0x62, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x41, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x41, 0x43, 0x4a, 0x6f, 0x62,
	0x22, 0x00, 0x12, 0x67, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x2b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0d, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x41, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x41, 0x43, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x00, 0x32, 0x83, 0x01, 0x0a, 0x12, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x6d, 0x0a, 0x11, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x1a, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0x8b, 0x02, 0x0a, 0x12, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d,
	0x0a, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x35, 0x5a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x69, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_control_plane_v1_irec_proto_rawDescOnce sync.Once
	file_proto_control_plane_v1_irec_proto_rawDescData = file_proto_control_plane_v1_irec_proto_rawDesc
)

func file_proto_control_plane_v1_irec_proto_rawDescGZIP() []byte {
	file_proto_control_plane_v1_irec_proto_rawDescOnce.Do(func() {
		file_proto_control_plane_v1_irec_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_control_plane_v1_irec_proto_rawDescData)
	})
	return file_proto_control_plane_v1_irec_proto_rawDescData
}

var file_proto_control_plane_v1_irec_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_proto_control_plane_v1_irec_proto_goTypes = []interface{}{
	(*BeaconAndEgressIntf)(nil),           // 0: proto.control_plane.v1.BeaconAndEgressIntf
	(*JobCompleteNotify)(nil),             // 1: proto.control_plane.v1.JobCompleteNotify
	(*JobCompleteResponse)(nil),           // 2: proto.control_plane.v1.JobCompleteResponse
	(*AlgorithmRequest)(nil),              // 3: proto.control_plane.v1.AlgorithmRequest
	(*AlgorithmResponse)(nil),             // 4: proto.control_plane.v1.AlgorithmResponse
	(*RACJob)(nil),                        // 5: proto.control_plane.v1.RACJob
	(*IncomingBeacon)(nil),                // 6: proto.control_plane.v1.IncomingBeacon
	(*IncomingBeaconResponse)(nil),        // 7: proto.control_plane.v1.IncomingBeaconResponse
	(*RACBeaconSources)(nil),              // 8: proto.control_plane.v1.RACBeaconSources
	(*RACBeaconSourcesRequest)(nil),       // 9: proto.control_plane.v1.RACBeaconSourcesRequest
	(*RACBeaconSource)(nil),               // 10: proto.control_plane.v1.RACBeaconSource
	(*RACBeaconRequest)(nil),              // 11: proto.control_plane.v1.RACBeaconRequest
	(*EgressBeacon)(nil),                  // 12: proto.control_plane.v1.EgressBeacon
	(*BeaconQueryAlgorithmOption)(nil),    // 13: proto.control_plane.v1.BeaconQueryAlgorithmOption
	(*BeaconQueryOriginOption)(nil),       // 14: proto.control_plane.v1.BeaconQueryOriginOption
	(*BeaconQuery)(nil),                   // 15: proto.control_plane.v1.BeaconQuery
	(*RACBeaconResponse)(nil),             // 16: proto.control_plane.v1.RACBeaconResponse
	(*StoredBeacon)(nil),                  // 17: proto.control_plane.v1.StoredBeacon
	(*PullPathsRequest)(nil),              // 18: proto.control_plane.v1.PullPathsRequest
	(*StoredBeaconAndIntf)(nil),           // 19: proto.control_plane.v1.StoredBeaconAndIntf
	(*PropagationRequest)(nil),            // 20: proto.control_plane.v1.PropagationRequest
	(*PropagationRequestResponse)(nil),    // 21: proto.control_plane.v1.PropagationRequestResponse
	(*IRECBeaconUnopt)(nil),               // 22: proto.control_plane.v1.IRECBeacon_unopt
	(*IRECBeacon)(nil),                    // 23: proto.control_plane.v1.IRECBeacon
	(*IRECPathSegment)(nil),               // 24: proto.control_plane.v1.IRECPathSegment
	(*IRECASEntry)(nil),                   // 25: proto.control_plane.v1.IRECASEntry
	(*IRECPathSegmentExcerpt)(nil),        // 26: proto.control_plane.v1.IRECPathSegment_excerpt
	(*IRECASEntryExcerpt)(nil),            // 27: proto.control_plane.v1.IRECASEntry_excerpt
	(*PathSegment)(nil),                   // 28: proto.control_plane.v1.PathSegment
	(*crypto.SignedMessage)(nil),          // 29: proto.crypto.v1.SignedMessage
	(*ASEntrySignedBody)(nil),             // 30: proto.control_plane.v1.ASEntrySignedBody
	(*PathSegmentUnsignedExtensions)(nil), // 31: proto.control_plane.v1.PathSegmentUnsignedExtensions
}
var file_proto_control_plane_v1_irec_proto_depIdxs = []int32{
	0,  // 0: proto.control_plane.v1.JobCompleteNotify.selection:type_name -> proto.control_plane.v1.BeaconAndEgressIntf
	23, // 1: proto.control_plane.v1.RACJob.beacons:type_name -> proto.control_plane.v1.IRECBeacon
	22, // 2: proto.control_plane.v1.RACJob.beacons_unopt:type_name -> proto.control_plane.v1.IRECBeacon_unopt
	28, // 3: proto.control_plane.v1.IncomingBeacon.segment:type_name -> proto.control_plane.v1.PathSegment
	10, // 4: proto.control_plane.v1.RACBeaconSources.sources:type_name -> proto.control_plane.v1.RACBeaconSource
	28, // 5: proto.control_plane.v1.EgressBeacon.pathSeg:type_name -> proto.control_plane.v1.PathSegment
	13, // 6: proto.control_plane.v1.BeaconQuery.algorithms:type_name -> proto.control_plane.v1.BeaconQueryAlgorithmOption
	14, // 7: proto.control_plane.v1.BeaconQuery.origins:type_name -> proto.control_plane.v1.BeaconQueryOriginOption
	23, // 8: proto.control_plane.v1.RACBeaconResponse.beacons:type_name -> proto.control_plane.v1.IRECBeacon
	28, // 9: proto.control_plane.v1.StoredBeacon.pathSeg:type_name -> proto.control_plane.v1.PathSegment
	17, // 10: proto.control_plane.v1.StoredBeaconAndIntf.beacon:type_name -> proto.control_plane.v1.StoredBeacon
	12, // 11: proto.control_plane.v1.PropagationRequest.beacon:type_name -> proto.control_plane.v1.EgressBeacon
	28, // 12: proto.control_plane.v1.IRECBeacon_unopt.pathSeg:type_name -> proto.control_plane.v1.PathSegment
	24, // 13: proto.control_plane.v1.IRECBeacon.pathSeg:type_name -> proto.control_plane.v1.IRECPathSegment
	25, // 14: proto.control_plane.v1.IRECPathSegment.as_entries:type_name -> proto.control_plane.v1.IRECASEntry
	29, // 15: proto.control_plane.v1.IRECASEntry.signed:type_name -> proto.crypto.v1.SignedMessage
	30, // 16: proto.control_plane.v1.IRECASEntry.signedBody:type_name -> proto.control_plane.v1.ASEntrySignedBody
	31, // 17: proto.control_plane.v1.IRECASEntry.unsigned:type_name -> proto.control_plane.v1.PathSegmentUnsignedExtensions
	27, // 18: proto.control_plane.v1.IRECPathSegment_excerpt.as_entries:type_name -> proto.control_plane.v1.IRECASEntry_excerpt
	30, // 19: proto.control_plane.v1.IRECASEntry_excerpt.signedBody:type_name -> proto.control_plane.v1.ASEntrySignedBody
	31, // 20: proto.control_plane.v1.IRECASEntry_excerpt.unsigned:type_name -> proto.control_plane.v1.PathSegmentUnsignedExtensions
	3,  // 21: proto.control_plane.v1.IngressInterService.GetAlgorithm:input_type -> proto.control_plane.v1.AlgorithmRequest
	6,  // 22: proto.control_plane.v1.IngressIntraService.Handle:input_type -> proto.control_plane.v1.IncomingBeacon
	3,  // 23: proto.control_plane.v1.IngressIntraService.GetAlgorithm:input_type -> proto.control_plane.v1.AlgorithmRequest
	15, // 24: proto.control_plane.v1.IngressIntraService.GetBeacons:input_type -> proto.control_plane.v1.BeaconQuery
	11, // 25: proto.control_plane.v1.IngressIntraService.GetJob:input_type -> proto.control_plane.v1.RACBeaconRequest
	1,  // 26: proto.control_plane.v1.IngressIntraService.JobComplete:input_type -> proto.control_plane.v1.JobCompleteNotify
	9,  // 27: proto.control_plane.v1.IngressIntraService.BeaconSources:input_type -> proto.control_plane.v1.RACBeaconSourcesRequest
	6,  // 28: proto.control_plane.v1.EgressInterService.PullBasedCallback:input_type -> proto.control_plane.v1.IncomingBeacon
	20, // 29: proto.control_plane.v1.EgressIntraService.RequestPropagation:input_type -> proto.control_plane.v1.PropagationRequest
	18, // 30: proto.control_plane.v1.EgressIntraService.RequestPullBasedOrigination:input_type -> proto.control_plane.v1.PullPathsRequest
	4,  // 31: proto.control_plane.v1.IngressInterService.GetAlgorithm:output_type -> proto.control_plane.v1.AlgorithmResponse
	7,  // 32: proto.control_plane.v1.IngressIntraService.Handle:output_type -> proto.control_plane.v1.IncomingBeaconResponse
	4,  // 33: proto.control_plane.v1.IngressIntraService.GetAlgorithm:output_type -> proto.control_plane.v1.AlgorithmResponse
	5,  // 34: proto.control_plane.v1.IngressIntraService.GetBeacons:output_type -> proto.control_plane.v1.RACJob
	5,  // 35: proto.control_plane.v1.IngressIntraService.GetJob:output_type -> proto.control_plane.v1.RACJob
	2,  // 36: proto.control_plane.v1.IngressIntraService.JobComplete:output_type -> proto.control_plane.v1.JobCompleteResponse
	8,  // 37: proto.control_plane.v1.IngressIntraService.BeaconSources:output_type -> proto.control_plane.v1.RACBeaconSources
	7,  // 38: proto.control_plane.v1.EgressInterService.PullBasedCallback:output_type -> proto.control_plane.v1.IncomingBeaconResponse
	21, // 39: proto.control_plane.v1.EgressIntraService.RequestPropagation:output_type -> proto.control_plane.v1.PropagationRequestResponse
	21, // 40: proto.control_plane.v1.EgressIntraService.RequestPullBasedOrigination:output_type -> proto.control_plane.v1.PropagationRequestResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_proto_control_plane_v1_irec_proto_init() }
func file_proto_control_plane_v1_irec_proto_init() {
	if File_proto_control_plane_v1_irec_proto != nil {
		return
	}
	file_proto_control_plane_v1_seg_proto_init()
	file_proto_control_plane_v1_seg_extensions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_control_plane_v1_irec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconAndEgressIntf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCompleteNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgorithmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgorithmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RACJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomingBeacon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomingBeaconResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RACBeaconSources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RACBeaconSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RACBeaconSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RACBeaconRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgressBeacon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconQueryAlgorithmOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconQueryOriginOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RACBeaconResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoredBeacon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullPathsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoredBeaconAndIntf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagationRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRECBeaconUnopt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRECBeacon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRECPathSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRECASEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRECPathSegmentExcerpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_irec_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRECASEntryExcerpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_control_plane_v1_irec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_proto_control_plane_v1_irec_proto_goTypes,
		DependencyIndexes: file_proto_control_plane_v1_irec_proto_depIdxs,
		MessageInfos:      file_proto_control_plane_v1_irec_proto_msgTypes,
	}.Build()
	File_proto_control_plane_v1_irec_proto = out.File
	file_proto_control_plane_v1_irec_proto_rawDesc = nil
	file_proto_control_plane_v1_irec_proto_goTypes = nil
	file_proto_control_plane_v1_irec_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IngressInterServiceClient is the client API for IngressInterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngressInterServiceClient interface {
	GetAlgorithm(ctx context.Context, in *AlgorithmRequest, opts ...grpc.CallOption) (*AlgorithmResponse, error)
}

type ingressInterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngressInterServiceClient(cc grpc.ClientConnInterface) IngressInterServiceClient {
	return &ingressInterServiceClient{cc}
}

func (c *ingressInterServiceClient) GetAlgorithm(ctx context.Context, in *AlgorithmRequest, opts ...grpc.CallOption) (*AlgorithmResponse, error) {
	out := new(AlgorithmResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.IngressInterService/GetAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngressInterServiceServer is the server API for IngressInterService service.
type IngressInterServiceServer interface {
	GetAlgorithm(context.Context, *AlgorithmRequest) (*AlgorithmResponse, error)
}

// UnimplementedIngressInterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIngressInterServiceServer struct {
}

func (*UnimplementedIngressInterServiceServer) GetAlgorithm(context.Context, *AlgorithmRequest) (*AlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlgorithm not implemented")
}

func RegisterIngressInterServiceServer(s *grpc.Server, srv IngressInterServiceServer) {
	s.RegisterService(&_IngressInterService_serviceDesc, srv)
}

func _IngressInterService_GetAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressInterServiceServer).GetAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.IngressInterService/GetAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressInterServiceServer).GetAlgorithm(ctx, req.(*AlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IngressInterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.control_plane.v1.IngressInterService",
	HandlerType: (*IngressInterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlgorithm",
			Handler:    _IngressInterService_GetAlgorithm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_plane/v1/irec.proto",
}

// IngressIntraServiceClient is the client API for IngressIntraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngressIntraServiceClient interface {
	Handle(ctx context.Context, in *IncomingBeacon, opts ...grpc.CallOption) (*IncomingBeaconResponse, error)
	GetAlgorithm(ctx context.Context, in *AlgorithmRequest, opts ...grpc.CallOption) (*AlgorithmResponse, error)
	GetBeacons(ctx context.Context, in *BeaconQuery, opts ...grpc.CallOption) (*RACJob, error)
	GetJob(ctx context.Context, in *RACBeaconRequest, opts ...grpc.CallOption) (*RACJob, error)
	JobComplete(ctx context.Context, in *JobCompleteNotify, opts ...grpc.CallOption) (*JobCompleteResponse, error)
	BeaconSources(ctx context.Context, in *RACBeaconSourcesRequest, opts ...grpc.CallOption) (*RACBeaconSources, error)
}

type ingressIntraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngressIntraServiceClient(cc grpc.ClientConnInterface) IngressIntraServiceClient {
	return &ingressIntraServiceClient{cc}
}

func (c *ingressIntraServiceClient) Handle(ctx context.Context, in *IncomingBeacon, opts ...grpc.CallOption) (*IncomingBeaconResponse, error) {
	out := new(IncomingBeaconResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.IngressIntraService/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressIntraServiceClient) GetAlgorithm(ctx context.Context, in *AlgorithmRequest, opts ...grpc.CallOption) (*AlgorithmResponse, error) {
	out := new(AlgorithmResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.IngressIntraService/GetAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressIntraServiceClient) GetBeacons(ctx context.Context, in *BeaconQuery, opts ...grpc.CallOption) (*RACJob, error) {
	out := new(RACJob)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.IngressIntraService/GetBeacons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressIntraServiceClient) GetJob(ctx context.Context, in *RACBeaconRequest, opts ...grpc.CallOption) (*RACJob, error) {
	out := new(RACJob)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.IngressIntraService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressIntraServiceClient) JobComplete(ctx context.Context, in *JobCompleteNotify, opts ...grpc.CallOption) (*JobCompleteResponse, error) {
	out := new(JobCompleteResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.IngressIntraService/JobComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressIntraServiceClient) BeaconSources(ctx context.Context, in *RACBeaconSourcesRequest, opts ...grpc.CallOption) (*RACBeaconSources, error) {
	out := new(RACBeaconSources)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.IngressIntraService/BeaconSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngressIntraServiceServer is the server API for IngressIntraService service.
type IngressIntraServiceServer interface {
	Handle(context.Context, *IncomingBeacon) (*IncomingBeaconResponse, error)
	GetAlgorithm(context.Context, *AlgorithmRequest) (*AlgorithmResponse, error)
	GetBeacons(context.Context, *BeaconQuery) (*RACJob, error)
	GetJob(context.Context, *RACBeaconRequest) (*RACJob, error)
	JobComplete(context.Context, *JobCompleteNotify) (*JobCompleteResponse, error)
	BeaconSources(context.Context, *RACBeaconSourcesRequest) (*RACBeaconSources, error)
}

// UnimplementedIngressIntraServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIngressIntraServiceServer struct {
}

func (*UnimplementedIngressIntraServiceServer) Handle(context.Context, *IncomingBeacon) (*IncomingBeaconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (*UnimplementedIngressIntraServiceServer) GetAlgorithm(context.Context, *AlgorithmRequest) (*AlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlgorithm not implemented")
}
func (*UnimplementedIngressIntraServiceServer) GetBeacons(context.Context, *BeaconQuery) (*RACJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeacons not implemented")
}
func (*UnimplementedIngressIntraServiceServer) GetJob(context.Context, *RACBeaconRequest) (*RACJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedIngressIntraServiceServer) JobComplete(context.Context, *JobCompleteNotify) (*JobCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobComplete not implemented")
}
func (*UnimplementedIngressIntraServiceServer) BeaconSources(context.Context, *RACBeaconSourcesRequest) (*RACBeaconSources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeaconSources not implemented")
}

func RegisterIngressIntraServiceServer(s *grpc.Server, srv IngressIntraServiceServer) {
	s.RegisterService(&_IngressIntraService_serviceDesc, srv)
}

func _IngressIntraService_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingBeacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressIntraServiceServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.IngressIntraService/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressIntraServiceServer).Handle(ctx, req.(*IncomingBeacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressIntraService_GetAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressIntraServiceServer).GetAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.IngressIntraService/GetAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressIntraServiceServer).GetAlgorithm(ctx, req.(*AlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressIntraService_GetBeacons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeaconQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressIntraServiceServer).GetBeacons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.IngressIntraService/GetBeacons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressIntraServiceServer).GetBeacons(ctx, req.(*BeaconQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressIntraService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RACBeaconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressIntraServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.IngressIntraService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressIntraServiceServer).GetJob(ctx, req.(*RACBeaconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressIntraService_JobComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCompleteNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressIntraServiceServer).JobComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.IngressIntraService/JobComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressIntraServiceServer).JobComplete(ctx, req.(*JobCompleteNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressIntraService_BeaconSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RACBeaconSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressIntraServiceServer).BeaconSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.IngressIntraService/BeaconSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressIntraServiceServer).BeaconSources(ctx, req.(*RACBeaconSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IngressIntraService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.control_plane.v1.IngressIntraService",
	HandlerType: (*IngressIntraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _IngressIntraService_Handle_Handler,
		},
		{
			MethodName: "GetAlgorithm",
			Handler:    _IngressIntraService_GetAlgorithm_Handler,
		},
		{
			MethodName: "GetBeacons",
			Handler:    _IngressIntraService_GetBeacons_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _IngressIntraService_GetJob_Handler,
		},
		{
			MethodName: "JobComplete",
			Handler:    _IngressIntraService_JobComplete_Handler,
		},
		{
			MethodName: "BeaconSources",
			Handler:    _IngressIntraService_BeaconSources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_plane/v1/irec.proto",
}

// EgressInterServiceClient is the client API for EgressInterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EgressInterServiceClient interface {
	PullBasedCallback(ctx context.Context, in *IncomingBeacon, opts ...grpc.CallOption) (*IncomingBeaconResponse, error)
}

type egressInterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEgressInterServiceClient(cc grpc.ClientConnInterface) EgressInterServiceClient {
	return &egressInterServiceClient{cc}
}

func (c *egressInterServiceClient) PullBasedCallback(ctx context.Context, in *IncomingBeacon, opts ...grpc.CallOption) (*IncomingBeaconResponse, error) {
	out := new(IncomingBeaconResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.EgressInterService/PullBasedCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EgressInterServiceServer is the server API for EgressInterService service.
type EgressInterServiceServer interface {
	PullBasedCallback(context.Context, *IncomingBeacon) (*IncomingBeaconResponse, error)
}

// UnimplementedEgressInterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEgressInterServiceServer struct {
}

func (*UnimplementedEgressInterServiceServer) PullBasedCallback(context.Context, *IncomingBeacon) (*IncomingBeaconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullBasedCallback not implemented")
}

func RegisterEgressInterServiceServer(s *grpc.Server, srv EgressInterServiceServer) {
	s.RegisterService(&_EgressInterService_serviceDesc, srv)
}

func _EgressInterService_PullBasedCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingBeacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressInterServiceServer).PullBasedCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.EgressInterService/PullBasedCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressInterServiceServer).PullBasedCallback(ctx, req.(*IncomingBeacon))
	}
	return interceptor(ctx, in, info, handler)
}

var _EgressInterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.control_plane.v1.EgressInterService",
	HandlerType: (*EgressInterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullBasedCallback",
			Handler:    _EgressInterService_PullBasedCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_plane/v1/irec.proto",
}

// EgressIntraServiceClient is the client API for EgressIntraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EgressIntraServiceClient interface {
	RequestPropagation(ctx context.Context, in *PropagationRequest, opts ...grpc.CallOption) (*PropagationRequestResponse, error)
	RequestPullBasedOrigination(ctx context.Context, in *PullPathsRequest, opts ...grpc.CallOption) (*PropagationRequestResponse, error)
}

type egressIntraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEgressIntraServiceClient(cc grpc.ClientConnInterface) EgressIntraServiceClient {
	return &egressIntraServiceClient{cc}
}

func (c *egressIntraServiceClient) RequestPropagation(ctx context.Context, in *PropagationRequest, opts ...grpc.CallOption) (*PropagationRequestResponse, error) {
	out := new(PropagationRequestResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.EgressIntraService/RequestPropagation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egressIntraServiceClient) RequestPullBasedOrigination(ctx context.Context, in *PullPathsRequest, opts ...grpc.CallOption) (*PropagationRequestResponse, error) {
	out := new(PropagationRequestResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.EgressIntraService/RequestPullBasedOrigination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EgressIntraServiceServer is the server API for EgressIntraService service.
type EgressIntraServiceServer interface {
	RequestPropagation(context.Context, *PropagationRequest) (*PropagationRequestResponse, error)
	RequestPullBasedOrigination(context.Context, *PullPathsRequest) (*PropagationRequestResponse, error)
}

// UnimplementedEgressIntraServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEgressIntraServiceServer struct {
}

func (*UnimplementedEgressIntraServiceServer) RequestPropagation(context.Context, *PropagationRequest) (*PropagationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPropagation not implemented")
}
func (*UnimplementedEgressIntraServiceServer) RequestPullBasedOrigination(context.Context, *PullPathsRequest) (*PropagationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPullBasedOrigination not implemented")
}

func RegisterEgressIntraServiceServer(s *grpc.Server, srv EgressIntraServiceServer) {
	s.RegisterService(&_EgressIntraService_serviceDesc, srv)
}

func _EgressIntraService_RequestPropagation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropagationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressIntraServiceServer).RequestPropagation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.EgressIntraService/RequestPropagation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressIntraServiceServer).RequestPropagation(ctx, req.(*PropagationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgressIntraService_RequestPullBasedOrigination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressIntraServiceServer).RequestPullBasedOrigination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.EgressIntraService/RequestPullBasedOrigination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressIntraServiceServer).RequestPullBasedOrigination(ctx, req.(*PullPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EgressIntraService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.control_plane.v1.EgressIntraService",
	HandlerType: (*EgressIntraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPropagation",
			Handler:    _EgressIntraService_RequestPropagation_Handler,
		},
		{
			MethodName: "RequestPullBasedOrigination",
			Handler:    _EgressIntraService_RequestPullBasedOrigination_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_plane/v1/irec.proto",
}
