// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IREC

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PeerEntry struct {
	_tab flatbuffers.Struct
}

func (rcv *PeerEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PeerEntry) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *PeerEntry) PeerIsdAs() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *PeerEntry) MutatePeerIsdAs(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *PeerEntry) PeerInterface() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *PeerEntry) MutatePeerInterface(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *PeerEntry) PeerMtu() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
func (rcv *PeerEntry) MutatePeerMtu(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func (rcv *PeerEntry) HopField(obj *HopField) *HopField {
	if obj == nil {
		obj = new(HopField)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+24)
	return obj
}

func CreatePeerEntry(builder *flatbuffers.Builder, peerIsdAs uint64, peerInterface uint64, peerMtu uint32, hop_field_ingress uint64, hop_field_egress uint64, hop_field_expTime uint32) flatbuffers.UOffsetT {
	builder.Prep(8, 48)
	builder.Prep(8, 24)
	builder.Pad(4)
	builder.PrependUint32(hop_field_expTime)
	builder.PrependUint64(hop_field_egress)
	builder.PrependUint64(hop_field_ingress)
	builder.Pad(4)
	builder.PrependUint32(peerMtu)
	builder.PrependUint64(peerInterface)
	builder.PrependUint64(peerIsdAs)
	return builder.Offset()
}
