// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IREC

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Beacon struct {
	_tab flatbuffers.Table
}

func GetRootAsBeacon(buf []byte, offset flatbuffers.UOffsetT) *Beacon {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Beacon{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Beacon) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Beacon) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Beacon) SegmentInfo(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Beacon) SegmentInfoLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Beacon) MutateSegmentInfo(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Beacon) AsEntries(obj *ASEntry, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Beacon) AsEntriesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Beacon) InIfId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Beacon) MutateInIfId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *Beacon) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Beacon) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func BeaconStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func BeaconAddSegmentInfo(builder *flatbuffers.Builder, segmentInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(segmentInfo), 0)
}
func BeaconStartSegmentInfoVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func BeaconAddAsEntries(builder *flatbuffers.Builder, asEntries flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(asEntries), 0)
}
func BeaconStartAsEntriesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BeaconAddInIfId(builder *flatbuffers.Builder, inIfId uint32) {
	builder.PrependUint32Slot(2, inIfId, 0)
}
func BeaconAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(3, id, 0)
}
func BeaconEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
