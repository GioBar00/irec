// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IREC

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GeoCoordinates struct {
	_tab flatbuffers.Table
}

func GetRootAsGeoCoordinates(buf []byte, offset flatbuffers.UOffsetT) *GeoCoordinates {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GeoCoordinates{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GeoCoordinates) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GeoCoordinates) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GeoCoordinates) IfId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GeoCoordinates) MutateIfId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *GeoCoordinates) Latitude() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GeoCoordinates) MutateLatitude(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *GeoCoordinates) Longitude() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GeoCoordinates) MutateLongitude(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *GeoCoordinates) Address() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GeoCoordinatesStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func GeoCoordinatesAddIfId(builder *flatbuffers.Builder, ifId uint64) {
	builder.PrependUint64Slot(0, ifId, 0)
}
func GeoCoordinatesAddLatitude(builder *flatbuffers.Builder, latitude float32) {
	builder.PrependFloat32Slot(1, latitude, 0.0)
}
func GeoCoordinatesAddLongitude(builder *flatbuffers.Builder, longitude float32) {
	builder.PrependFloat32Slot(2, longitude, 0.0)
}
func GeoCoordinatesAddAddress(builder *flatbuffers.Builder, address flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(address), 0)
}
func GeoCoordinatesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
