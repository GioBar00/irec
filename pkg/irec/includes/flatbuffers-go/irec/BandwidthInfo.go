// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IREC

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BandwidthInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsBandwidthInfo(buf []byte, offset flatbuffers.UOffsetT) *BandwidthInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BandwidthInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BandwidthInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BandwidthInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BandwidthInfo) Intra(obj *MapEntryUlongUlong, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 16
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *BandwidthInfo) IntraLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *BandwidthInfo) Inter(obj *MapEntryUlongUlong, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 16
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *BandwidthInfo) InterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func BandwidthInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BandwidthInfoAddIntra(builder *flatbuffers.Builder, intra flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(intra), 0)
}
func BandwidthInfoStartIntraVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(16, numElems, 8)
}
func BandwidthInfoAddInter(builder *flatbuffers.Builder, inter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(inter), 0)
}
func BandwidthInfoStartInterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(16, numElems, 8)
}
func BandwidthInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
