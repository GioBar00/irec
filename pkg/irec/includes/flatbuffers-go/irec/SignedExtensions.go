// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IREC

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SignedExtensions struct {
	_tab flatbuffers.Table
}

func GetRootAsSignedExtensions(buf []byte, offset flatbuffers.UOffsetT) *SignedExtensions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SignedExtensions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SignedExtensions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SignedExtensions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SignedExtensions) StaticInfo(obj *StaticInfoExt) *StaticInfoExt {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(StaticInfoExt)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SignedExtensions) HiddenPath(obj *HiddenPathExt) *HiddenPathExt {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(HiddenPathExt)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SignedExtensions) Irec(obj *IrecExt) *IrecExt {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(IrecExt)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SignedExtensionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SignedExtensionsAddStaticInfo(builder *flatbuffers.Builder, staticInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(staticInfo), 0)
}
func SignedExtensionsAddHiddenPath(builder *flatbuffers.Builder, hiddenPath flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(hiddenPath), 0)
}
func SignedExtensionsAddIrec(builder *flatbuffers.Builder, irec flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(irec), 0)
}
func SignedExtensionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
