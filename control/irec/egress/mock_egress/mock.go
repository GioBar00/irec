// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/control/beaconing (interfaces: BeaconInserter,BeaconProvider,Sender,RPC,SegmentProvider,SegmentStore,SenderFactory)

// Package mock_beaconing is a generated GoMock package.
package mock_egress

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	"github.com/scionproto/scion/control/beacon"
	"github.com/scionproto/scion/control/irec/egress"
	addr "github.com/scionproto/scion/pkg/addr"
	"github.com/scionproto/scion/pkg/segment"
	"github.com/scionproto/scion/private/segment/seghandler"
	net "net"
	reflect "reflect"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSender) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSenderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSender)(nil).Close))
}

// Send mocks base method.
func (m *MockSender) Send(arg0 context.Context, arg1 *segment.PathSegment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSenderMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSender)(nil).Send), arg0, arg1)
}

// MockRPC is a mock of RPC interface.
type MockRPC struct {
	ctrl     *gomock.Controller
	recorder *MockRPCMockRecorder
}

// MockRPCMockRecorder is the mock recorder for MockRPC.
type MockRPCMockRecorder struct {
	mock *MockRPC
}

// NewMockRPC creates a new mock instance.
func NewMockRPC(ctrl *gomock.Controller) *MockRPC {
	mock := &MockRPC{ctrl: ctrl}
	mock.recorder = &MockRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPC) EXPECT() *MockRPCMockRecorder {
	return m.recorder
}

// RegisterSegment mocks base method.
func (m *MockRPC) RegisterSegment(arg0 context.Context, arg1 segment.Meta, arg2 net.Addr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSegment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSegment indicates an expected call of RegisterSegment.
func (mr *MockRPCMockRecorder) RegisterSegment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSegment", reflect.TypeOf((*MockRPC)(nil).RegisterSegment), arg0, arg1, arg2)
}

// MockSegmentStore is a mock of SegmentStore interface.
type MockSegmentStore struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentStoreMockRecorder
}

// MockSegmentStoreMockRecorder is the mock recorder for MockSegmentStore.
type MockSegmentStoreMockRecorder struct {
	mock *MockSegmentStore
}

// NewMockSegmentStore creates a new mock instance.
func NewMockSegmentStore(ctrl *gomock.Controller) *MockSegmentStore {
	mock := &MockSegmentStore{ctrl: ctrl}
	mock.recorder = &MockSegmentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentStore) EXPECT() *MockSegmentStoreMockRecorder {
	return m.recorder
}

// StoreSegs mocks base method.
func (m *MockSegmentStore) StoreSegs(arg0 context.Context, arg1 []*segment.Meta) (seghandler.SegStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSegs", arg0, arg1)
	ret0, _ := ret[0].(seghandler.SegStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreSegs indicates an expected call of StoreSegs.
func (mr *MockSegmentStoreMockRecorder) StoreSegs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSegs", reflect.TypeOf((*MockSegmentStore)(nil).StoreSegs), arg0, arg1)
}

// MockSenderFactory is a mock of SenderFactory interface.
type MockSenderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSenderFactoryMockRecorder
}

// MockSenderFactoryMockRecorder is the mock recorder for MockSenderFactory.
type MockSenderFactoryMockRecorder struct {
	mock *MockSenderFactory
}

// NewMockSenderFactory creates a new mock instance.
func NewMockSenderFactory(ctrl *gomock.Controller) *MockSenderFactory {
	mock := &MockSenderFactory{ctrl: ctrl}
	mock.recorder = &MockSenderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSenderFactory) EXPECT() *MockSenderFactoryMockRecorder {
	return m.recorder
}

// NewSender mocks base method.
func (m *MockSenderFactory) NewSender(arg0 context.Context, arg1 addr.IA, arg2 uint16, arg3 *net.UDPAddr) (egress.Sender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSender", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(egress.Sender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSender indicates an expected call of NewSender.
func (mr *MockSenderFactoryMockRecorder) NewSender(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSender", reflect.TypeOf((*MockSenderFactory)(nil).NewSender), arg0, arg1, arg2, arg3)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockWriter) Write(ctx context.Context, segs []beacon.Beacon, peers []uint16, extendBeacon bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, segs, peers, extendBeacon)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockWriterMockRecorder) Write(ctx, segs, peers, extendBeacon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriter)(nil).Write), ctx, segs, peers, extendBeacon)
}

// WriterType mocks base method.
func (m *MockWriter) WriterType() segment.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriterType")
	ret0, _ := ret[0].(segment.Type)
	return ret0
}

// WriterType indicates an expected call of WriterType.
func (mr *MockWriterMockRecorder) WriterType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriterType", reflect.TypeOf((*MockWriter)(nil).WriterType))
}
