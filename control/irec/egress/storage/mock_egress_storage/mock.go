// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/control/beaconing (interfaces: BeaconInserter,BeaconProvider,Sender,RPC,SegmentProvider,SegmentStore,SenderFactory)

// Package mock_beaconing is a generated GoMock package.
package mock_egress_storage

import (
	context "context"
	"github.com/scionproto/scion/control/ifstate"
	"github.com/scionproto/scion/control/irec/egress/storage"
	reflect "reflect"
	"time"

	gomock "github.com/golang/mock/gomock"
)

// MockSenderFactory is a mock of SenderFactory interface.
type MockEgressDB struct {
	ctrl     *gomock.Controller
	recorder *MockEgressDBMockRecorder
}

func (m *MockEgressDB) UpdateExpiry(ctx context.Context, beaconHash []byte, intf *ifstate.Interface, expiry time.Time) error {
	//TODO implement me
	panic("implement me")
}

func (m *MockEgressDB) DeleteBeacon(ctx context.Context, beaconHash []byte, intf *ifstate.Interface) error {
	//TODO implement me
	panic("implement me")
}

func (m *MockEgressDB) BeaconsThatShouldBePropagated(ctx context.Context, beacons []storage.EgressBeacon, expiry time.Time) ([]storage.EgressBeacon, error) {
	//TODO implement me
	panic("implement me")
}

func (m *MockEgressDB) GetDBSize(ctx context.Context) (int, error) {
	//TODO implement me
	panic("implement me")
}

// MockSenderFactoryMockRecorder is the mock recorder for MockSenderFactory.
type MockEgressDBMockRecorder struct {
	mock *MockEgressDB
}

// NewMockEgressDB creates a new mock instance.
func NewMockEgressDB(ctrl *gomock.Controller) *MockEgressDB {
	mock := &MockEgressDB{ctrl: ctrl}
	mock.recorder = &MockEgressDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEgressDB) EXPECT() *MockEgressDBMockRecorder {
	return m.recorder
}

// IsBeaconAlreadyPropagated mocks base method.
func (m *MockEgressDB) IsBeaconAlreadyPropagated(arg0 context.Context, arg1 []byte, arg2 *ifstate.Interface) (bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBeaconAlreadyPropagated", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MarkBeaconAsPropagated mocks base method.
func (m *MockEgressDB) MarkBeaconAsPropagated(arg0 context.Context, arg1 []byte, arg2 *ifstate.Interface, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkBeaconAsPropagated", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsBeaconAlreadyPropagated indicates an expected call of IsBeaconAlreadyPropagated.
func (mr *MockEgressDBMockRecorder) IsBeaconAlreadyPropagated(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBeaconAlreadyPropagated", reflect.TypeOf((*MockEgressDB)(nil).IsBeaconAlreadyPropagated), arg0, arg1, arg2)
}

// IsBeaconAlreadyPropagated indicates an expected call of IsBeaconAlreadyPropagated.
func (mr *MockEgressDBMockRecorder) MarkBeaconAsPropagated(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkBeaconAsPropagated", reflect.TypeOf((*MockEgressDB)(nil).MarkBeaconAsPropagated), arg0, arg1, arg2, arg3)
}
