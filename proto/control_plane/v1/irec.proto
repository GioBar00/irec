syntax = "proto3";

option go_package = "github.com/scionproto/scion/pkg/proto/control_plane";
import "proto/control_plane/v1/seg.proto";
import "proto/control_plane/v1/seg_extensions.proto";
import "proto/crypto/v1/signed.proto";

package proto.control_plane.v1;

service IngressInterService {
    rpc GetAlgorithm(AlgorithmRequest) returns (AlgorithmResponse) {}
}
service IngressIntraService {
    rpc Handle(IncomingBeacon) returns (IncomingBeaconResponse) {}
    rpc GetAlgorithm(AlgorithmRequest) returns (AlgorithmResponse) {}

    rpc GetBeacons(BeaconQuery) returns (RACJob) {}
    rpc GetJob(RACBeaconRequest) returns (RACJob) {}
    // Beacon sends a beacon to the remote.
    rpc JobComplete(JobCompleteNotify) returns (JobCompleteResponse) {}
    rpc BeaconSources(RACBeaconSourcesRequest) returns (RACBeaconSources) {}


//    rpc PathForAlgorithmId(AlgorithmNotification) returns ()
//    rpc Test(TestRequest) returns (TestResponse) {}
}
message BeaconAndEgressIntf{
    int64 selected = 1;
    repeated uint32 egressIntfs = 2;
}
message JobCompleteNotify {
    repeated int64 rowIDs = 1;
    repeated BeaconAndEgressIntf selection = 2;
}
message JobCompleteResponse {
}

message AlgorithmRequest {
    bytes algorithmHash = 1;
}
message AlgorithmResponse {
    bytes code = 1;
}

message RACJob {
    repeated proto.control_plane.v1.IRECBeacon beacons = 1;
    bytes algorithmHash = 2;
//    repeated InterfaceInfo intfs = 3;
    repeated uint32 propIntfs = 4;
    uint32 beaconCount = 5;
    bytes flatbuffer = 6;
    repeated int64 rowIds = 7;
    repeated IRECBeacon_unopt beacons_unopt = 8;
}

message IncomingBeacon {
    // Beacon in form of a partial path segment.
    PathSegment segment = 1;
}


message IncomingBeaconResponse {}

message RACBeaconSources {
    repeated RACBeaconSource sources = 1;
}
message RACBeaconSourcesRequest {
    bool ignoreIntfGroup = 1;
}
message RACBeaconSource {
    bytes algorithmHash = 1;
    uint32 algorithmID = 2;
    uint64 originAS = 3;
    uint32 originIntfGroup = 4;
}
message RACBeaconRequest {
    uint32 maximum = 1; // max amount of beacons to retrieve, 0 for no limit
    bytes algorithmHash = 2; // the hash of the algorithm for which to retrieve beacons
    uint32 algorithmID = 3;
    uint64 originAS = 4; // the origin isd-as for which to retrieve the beacons
    uint32 originIntfGroup = 5; // the origin intf group for which to retrieve the beacons
    bool ignoreIntfGroup = 6; // if false, ignore the originIntfGroup argument and get all for an originAS.
}


message EgressBeacon {
    PathSegment pathSeg = 1;
    uint32 inIfId = 2;
    repeated uint32 egressIntfs = 3;
    uint64 pullbasedTarget = 4;
}


message BeaconQueryAlgorithmOption {
    bytes algHash = 1;
    repeated uint32 algID = 2;
}

message BeaconQueryOriginOption {
    uint64 originAS = 1;
    repeated uint32 originIntfGroup = 2;
}

message BeaconQuery {
    uint32 maximum = 1; // max amount of beacons to retrieve, 0 for no limit
    repeated BeaconQueryAlgorithmOption algorithms = 2;
    repeated BeaconQueryOriginOption origins = 3;
    bool onlyUnmarked = 4;
    repeated uint32 labels =5;
}

message RACBeaconResponse {
    repeated IRECBeacon beacons = 1;
}

message StoredBeacon {
    PathSegment pathSeg = 1;
    uint32 inIfId = 2;
}



service EgressInterService {
    rpc PullBasedCallback(IncomingBeacon) returns (IncomingBeaconResponse) {}
}
service EgressIntraService {
    rpc RequestPropagation(PropagationRequest) returns (PropagationRequestResponse) {}
    rpc RequestPullBasedOrigination(PullPathsRequest) returns (PropagationRequestResponse) {}
}

message PullPathsRequest {
    // ISD-AS of the destination of the path request.
    uint64 destination_isd_as = 2;
    // Choose to fetch fresh paths for this request instead
    // of having the server reply from its cache.
    bytes algorithmHash = 3;
    // Request hidden paths instead of standard paths.
    uint32 algorithmId = 4;
}



message StoredBeaconAndIntf {
    StoredBeacon beacon = 1;
    repeated uint32 egress = 2;
}

message PropagationRequest {
    repeated EgressBeacon beacon = 1;
}
message PropagationRequestResponse{}


message IRECBeacon_unopt {
    PathSegment pathSeg = 1;
    uint32 inIfId = 2;
    int64 id = 3; // Optional, unique id within a candidate set
}


message IRECBeacon {
    IRECPathSegment_excerpt pathSeg = 1;
    uint32 inIfId = 2;
    int64 id = 3; // Optional, unique id within a candidate set
}

message IRECPathSegment {
    // The encoded SegmentInformation. It is used for signature input.
    bytes segment_info = 1;
    // Entries of ASes on the path.
    repeated IRECASEntry as_entries = 2;
}

message IRECASEntry {
    proto.crypto.v1.SignedMessage signed = 1; //optional
    // To save time unmarshalling, at the expense of storage, already store the body of the signed entry;
    proto.control_plane.v1.ASEntrySignedBody signedBody = 3;
    proto.control_plane.v1.PathSegmentUnsignedExtensions unsigned = 2;
}

message IRECPathSegment_excerpt {
    // The encoded SegmentInformation. It is used for signature input.
    bytes segment_info = 1;
    // Entries of ASes on the path.
    repeated IRECASEntry_excerpt as_entries = 2;
}
message IRECASEntry_excerpt {
    proto.control_plane.v1.ASEntrySignedBody signedBody = 3;
    proto.control_plane.v1.PathSegmentUnsignedExtensions unsigned = 2;
}

